[
  {
    "id": 1,
    "title": "HTMLとは?",
    "content": "HTMLとは?HTMLとはHypertext Markup Languageといい、Webページを作成するためのマークアップ言語です。コンピュータはこのHTMLを介して、テキストを読み込みます。HTMLは主にテキストを読み込むためのもので、CSSと組み合わせて、画面の構成を作っていくことができます。HTMLには複数種のタグが存在し、その特徴に応じて使い分けることができます。主にHTMLはタグ・要素・属性から構成されています。タグタグは、HTML文書の構造と内容を定義するための基本的な構成要素です。タグは通常、角括弧で囲まれており、開始タグと終了タグのペアで使用されます。タグは要素の種類や機能を示し、内容を指定するために使用されます。例えば、アンカータグの場合、基本的には、リンクを与えるために用いられます。また、pタグの場合、テキストを表示するために用いられるなど、タグによってそのタグに挟まれるテキストに役割を与えます。要素要素（element）は、HTML文書の基本的な構成単位であり、開始タグ、終了タグ、タグの間に配置されるコンテンツで構成されています。要素は、ウェブページの構造や内容を形づくり、ブラウザがそれをどのように表示するかを指定します。属性HTMLにおける属性（attribute）は、要素に追加の情報を提供し、その動作や表示方法を指定するために使用されます。属性は開始タグ内に書かれ、名前と値のペアとして指定されます。属性は、要素に対して具体的な設定やデータを与えることができます。属性は開始タグ内に指定され、名前と等号（`=`）、そして引用符で囲まれた値から成ります。複数の属性を持つことも可能です。例属性の書き方この時、href属性にsample.htmlという属性値を与えます。このhref属性は主にアンカータグで用いられることが基本的です。このようにWebページを構成する基本的なものがHTMLによって形づくられます。今回の章はここまでです。次回はタグの紹介をします。",
    "image": "/images/course_image/chapter_image/undraw_chapter1.png",
    "url": "/texts/html/chapter/1"
  },
  {
    "id": 2,
    "title": "HTMLの基本構造",
    "content": "Chapter1ではHTMLを構成するものとしてタグ・要素・属性の話をしましたが、本章では、HTMLの基本構造に関して説明します。ここからは主にWebページを作成するためのHTMLの書き方を説明していきます。基本的なHTMLファイルの書き方は以下の通りです。!doctype html はHTMLを書くための呪文だと思って大丈夫です。html タグがHTML全体を包むように位置しており、lang=”ja”は、言語を日本語に指定しています。headタグheadタグはページの表示に影響は与えませんが、ブラウザや検索エンジンなどのページの動作などに影響を与えます。meta charset=”utf-8”このコードは、HTMLの文字エンコーディングを指定するために必要です。`UTF-8`はUnicode標準の一部であり、世界中のほぼすべての文字を使用することができるため、基本的にはUTF-8を指定することが多いです。width=device-widthこれは画面幅をデバイスの幅に合わせます。これが設定されていない場合、ページは通常、PC向けの幅（例えば、980pxなど）で表示されるため、モバイルデバイスで縮小された状態になります。この内容はWeb制作という面では非常に重要で、google検索の準位付けのシステム(SEO)に関して影響を与えます。特にレスポンシブ対応のWebページを優先的に検索準位を高く指定するからです。initial-scale=1これは初期ズームレベルを1(100%)として設定します。このように設定することでページがデバイスのネイティブ解像度で表示されます。titleタグこれはWebページのタイトルの部分に表示されるものを指定することができます。urlタグここでは主に、このHTMLのWebページに適応するCSSファイルを紐づけます。rel=”stylesheet”は典型文句だと思ってそのまま使うので十分かと思います。これがheadタグの中身になります。bodyタグこのタグの中身が主に、Webページに表示するための要素になります。bodyタグの中で記述する細かいタグに関しては次章で詳しく説明しようと思います。bodyタグの最下部にscriptタグが存在すると思います。このタグは、画面の動きを入れるためのjavaScriptのファイルを読み込むための部分になります。今回の章はここまでです。HTMLの大まかな仕組みに関しては理解できましたでしょうか？次章はbodyタグ内に記述していく様々なタグに関して説明していきたいと思います。",
    "image": "/images/course_image/chapter_image/undraw_chapter2.png",
    "url": "/texts/html/chapter/2"
  },
  {
    "id": 3,
    "title": "基本的なタグに関して",
    "content": "HTMLタグdivタグ要素をグループ化するためのタグpタグ段落タグ。paragraphの頭文字をとってpタグと名前が付けられています。pタグを使うことで文章をひとまとめにすることができます。文章を整理するために使われるタグです。brタグ改行タグ。breakの頭文字を用いてbrタグと言われています。改行したいところにbrタグを使うことで文章を改行することができます。aタグAnchorタグの略称。主に、リンクを付与して、画面遷移のために使用されることが多いです。主に使用する属性はhrefです。簡単な使い方を以下で説明します。aタグ例:a href=./sample.htmlここをクリック/aこのように記述すると、ここをクリックの文章にsample.htmlのページへ遷移するための実装をすることができます。次によく用いられる属性としてtarget属性を用いられます。特に、target=_blankがよく用いられます。これは、リンクをクリックしてページを遷移する際に、元のページは開いたまま、新しいページに遷移してリンク先のページを開くというものです。例えば、ブログを書く際に、ほかのページを参考にするためにリンクを付与したいのであれば、このような属性を付与させることで外部ページを新たなタブで開くことができるので、自身が公開したもとのページは開いたままで実装することができます。書き方としては以下のように書くことができます。a href=./sample.html target=_blankここをクリック/a###ulタグ、liタグulタグはunorderedlistの略で、順序がない箇条書きのリストを表示するためのものです。liタグは、listitemの略で、ulタグの中でliタグを用いることで、順序がない箇条書きのリストを表示することができます。例:ull項目1/li l項目2/li l項目3/li/ulこのように記述することで、以下のように画面上で表示することができます。-項目1-項目2-項目3###olタグ、liタグolタグは、orderedlistの略で、順序の決まったリストを表示することができます。例:oll項目1/li l項目2/li l項目3/li/olこのように記述すると、Webページ上では以下のように表示されます。1.項目12.項目23.項目3###imgタグimageの略で画像を埋め込むためのタグです。src属性で画像のパスを指定することで指定した画像を埋め込むことができます。GIF形式*、JPEG形式、PNG形式*の画像形式を指定して埋め込むことができます。例:img src=./sample.png width=300 height=300 alt=サンプル画像基本的には、src属性以外に、width属性やheight属性を用いて埋め込む画像のサイズを指定します。これは指定をしなかった場合、元の画像のサイズで表示されてしまうため、かなり大きく表示されたり小さく表示されてしまったりするため、基本的には指定することが多いです。また、alt属性は、画像が読み込めなかった場合にテキストで表示するための属性です。alt属性を指定しておくことで画像が読み込めているかどうかがわかるため、これも基本的には指定しておくといいと思います。以上でHTMLの内容に関しての内容は終了です。HTMLの概要に関しては理解できましたでしょうか？最後まで御覧いただきありがとうございました。",
    "image": "/images/course_image/chapter_image/undraw_chapter3.png",
    "url": "/texts/html/chapter/3"
  },
  {
    "id": 4,
    "title": "CSSとは",
    "content": "CSSとは？正式には、CascadingStyleSheetsと言い、テキストベースのHTMLに対してスタイルを割り当てることができます。基本的には、HTML/CSSがセットで、最低限の1つの静的なWebページを完成させることができます。(JavaScriptも用いて作成されるのが一般的)CSSの適用方法CSSの適用方法は主に2種類あります。1つ目は、CSSファイルを作成し、そこに記載したクラスをHTML側で利用することができます。2つ目の方法はHTMLタグの中に直接書き込む方法です。CSSファイルを作成し、そのファイルに記載したクラスをHTML側で利用する方法1つ目の方法はcssファイルを作成し、それをHTML側で読み込んで反映させる方法です。!doctypehtmlhtml lang=jaheadmeta charset=utf-8meta name=viewportcontent=width=device-width,initial-scale=1titleCSSdemotitleCSSの読み込みurl href=css/main.css rel=stylesheetheadbodyh1Helloworld!h1script src=js/main.jsscriptbodyhtml上記のコードのように、以下の部分でCSSファイルを読み込みます。url href=css/main.cssrel=stylesheetこのように記載することで、main.cssに記述したcssのクラスをこのHTMLファイル内で反映させることができます。例えば、main.cssのファイル内で、以下のクラスが指定されているとします。sample{text-align:center;font-weight:bold;}このファイルをHTML側で読み込んだ後に、HTMLのタグ内で指定します。div class=sampleHelloWorld!/divこのようにすることで、HelloWorldの文字が装飾されます。HTMLタグ内にstyleを直接書き込むこの方法はHTMLタグ内に直接スタイルを書き込むことで、そのタグにだけ特定のスタイルを付与することができます。例えば、以下のように、文字に色を付けてみます。h2style=color:grayHelloWorld!h2このように指定すると、このh2タグのみ、文字色を付与することができます。各手法のメリットデメリットCSSファイルを作成し、そのファイルに記載したクラスをHTML側で利用する方法この方法のメリットは以下の通りです。タグ間、ページ間で同じCSSファイルのスタイルを繰り返し利用できるメディアクエリなどのレスポンシブスタイルなどを細かく作成することができる複数のページのCSSファイルを一つのHTMLファイルに適用することができるクラスに対してホバーした時の挙動、アニメーションを付与することができるデメリットは以下の通りです。ほかのCSSファイルも適用している場合、そのCSSに引っ張られてうまくクラスが追加できないなどの可能性があるこの手法では、全HTMLページ共通のスタイルなど、ほかのページのスタイルとかぶりが無いようにうまくCSSファイルを作成することで有効的にデザインを適用することができます。この場合、設計の段階でしっかり構成を考えていく必要があるかなと思います。この方法で難しいなという場合は、各HTMLページごとにCSSファイルを作成するのがおすすめです！HTMLタグ内にstyleを直接書き込むこの方法のメリットは以下の通りです。ほかのCSSファイルに影響を受けないほかのCSSファイルのクラスの部分的に不要なスタイルを打ち消すことができるデメリット冗長なコードになってしまうメディアクエリやアニメーションなどのCSS独特の機能を付与することが難しいこの手法は例えば、BootstrapなどのCSSクラスを取りまとめているフレームワークをHTMLページに適用する際に、そのクラスの一部のスタイルを打ち消したいなどの時に有効的に使用することができます。一般的にフレームワークのスタイルを書き換えるのはタブーとされているため、この手法が好まれます。また、CSSはCascadingStyleSheetsというだけあって、一番最後のスタイルを読み込みます。ですので、この手法で記述したスタイルが最も最後の読み込みのスタイルであるため一番優先的に読み込まれます。今回の内容はここまでです。次回は基本的なCSSのスタイルに関しての説明を行います。",
    "image": "/images/course_image/chapter_image/undraw_chapter1.png",
    "url": "/texts/css/chapter/1"
  },
  {
    "id": 5,
    "title": "基本的なCSSのスタイルに関してⅠ",
    "content": "`基本的なCSSのスタイルに関してこの章から基本的なCSSのスタイルに関して説明していきたいと思います。主に高頻度で使用するスタイルを紹介していくので、作りたいものに応じて必要があれば適宜より詳しい教材などで調べてみてください。フォントに関するスタイルfont-color字の色を設定しますfont-weight字の太さを指定します。一般的な太字の場合boldで問題ありませんfont-style字体を指定します。字体は既存のフォントや使いたいフォントを読み込んで使うことができます。font-sizeフォントの大きさを指定します。emやrem,pxなどの単位で指定することができます。基本的には既存のhタグで対応したいところですが、カスタマイズするのも全然いいかなと思います。余白に関してのスタイル余白は基本的にmarginを用います。例えば以下のようにmarginのスタイルを割り当てた場合pstyle=margin:10px2px15px7pxこれはサンプルですpこの場合、これはサンプルですの文章の上に10px,右に2px,下に15px,左に7pxの余白を作ることができます。余白の大きさは,px,rem,em単位で指定することができます。指定の方法は、pstyle=margin:10pxこれはサンプルですpこのように指定した場合、全方向に10pxの余白を作ることができます。また、pstyle=margin:10px2pxこれはサンプルですpこのように指定した場合上下に10pxずつ、左右に2pxずつの余白を作ることができます。このように、1つの間隔指定の場合、上下左右に対しての指定をすることができ、2つの間隔の指定の場合、1つ目が上下、2つ目の指定が左右の指定を行うことができます。各指定の間は半角スペースで指定することができます。4つの指定で余白を指定する場合、上右下左の順で指定されます。この方法とは別に、上下左右を特定して余白を指定することができます。margin-rightmargin-leftmargin-topmargin-bottomこのようにして直接指定することも可能です。paddingを用いて別のタグとの間隔を調整今度はpaddingというスタイルを用いて間隔を調整するための方法を説明します。pstyle=padding:10px2px15px7pxこれはサンプルですpこの場合、これはサンプルですの文章の上に10px,右に2px,下に15px,左に7pxの間隔を作ることができます。間隔の大きさは,px,rem,em単位で指定することができます。指定の方法は、pstyle=padding:10pxこれはサンプルですpこのように指定した場合、全方向に10pxの間隔を作ることができます。また、pstyle=padding:10px2pxこれはサンプルですpこのように指定した場合上下に10pxずつ、左右に2pxずつの間隔を作ることができます。このように、1つの間隔指定の場合、上下左右に対しての指定をすることができ、2つの間隔の指定の場合、1つ目が上下、2つ目の指定が左右の指定を行うことができます。各指定の間は半角スペースで指定することができます。4つの指定で間隔を指定する場合、上右下左の順で指定されます。このpaddingもmarginと同様に上下左右を限定して指定することができます。padding-toppadding-bottompadding-leftpadding-rightこのようにして直接指定してスタイルを充てることができます。paddingとmarginの違い一見、paddingとmarginは同じ役割を果たすように見えますが、実は役割が違います。例えば、HelloWorld!の文字の背景がgrayのもので、marginとpaddingが記載されている物を書きます。pstyle=background-color:gray;padding:20pxHelloWorld!pこの場合と、pstyle=background-color:gray;margin:20px;HelloWorld!pこの場合を比較してみます。この画像は上がpadding,下がmarginので反映させたものです。イメージとしては、paddingはタグの中に間隔を作るのに対して、marginはタグの外側に間隔を作るというイメージが適切かと思います。今回の内容はここまでです。次回はカラーやタグの上下関係に関して説明します。`",
    "image": "/images/course_image/chapter_image/undraw_chapter2.png",
    "url": "/texts/css/chapter/2"
  },
  {
    "id": 6,
    "title": "基本的なCSSのスタイルに関してⅡ",
    "content": "`CSSの基本的な内容に関してカラーカラーは主に、文字色のためのカラーと背景色のカラーがあります。スタイル名としてはcolorbackground-colorカラーの指定の方法はカラーコードで指定する方法と、代表的なカラー名を打ち込む方法があります。カラーコードに関しては(ハッシュタグ)から始まる6つの数字やアルファベットの組み合わせによって表現されています。また、ほかのWebページのカラーを取得したい場合、カラーピッカーなどを用いて3原色からカラーコードを検索することができます。z-indexに関して画面の表示の際に、最前面、最背面などを指定することができます。このスタイルはz-indexで指定することができます。指定の仕方は、z-index:1;で指定することができます。これは数値で指定することができます。z-indexの値が大きいほど最前面に近く、z-indexの値が小さいほど、最背面に近いです。これは、ヘッダーを固定するときなどに有効に使うことができます。今回の内容は短いですが、ここまでにしたいと思います。次回は、メディアクエリの使用法に関して説明したいと思います。`",
    "image": "/images/course_image/chapter_image/undraw_chapter3.png",
    "url": "/texts/css/chapter/3"
  },
  {
    "id": 7,
    "title": "メディアクエリに関して",
    "content": "`メディアクエリに関してメディアクエリは、主に画面幅に応じてクラスを割り当てることができます。この手法を用いてレスポンシブ対応などを実装することができます。Chapter1でも話をさせていただきましたが、CSSはCascadingStyleSheetsといい、スタイルを最後に与えたものが最も反映されます。今回説明するメディアクエリは以下のような仕組みになっています。ベースとなるcssのクラス.style{font-size:1rem;font-weight:bold;font-color:black;}このクラスをメディアクエリを用いて書いてみます。style{font-size:1rem;font-weight:bold;font-color:black;}@mediascreenand(max-width:756px){style{font-size:1rem;font-weight:500;font-color:gray;}}メディアクエリはこのように書くのですが、(書き方は後に詳しく説明します。)まずは、上の.styleのクラスを読み込みますが、画面幅が756pxよりも狭い場合はメディアクエリのくくりの中にある.styleを読み込みます。この時に先ほど読み込んでいた上の.styleを下の.styleで上書きします。これがCSSの特性を利用したメディアクエリという手法です。書き方@mediascreenand(max-width:){メディアクエリ内のクラス}@mediascreenand(min-width:){メディアクエリ内のクラス}メディアクエリはこのように書きます。max-widthで指定するときは、その指定した画面幅以下の画面幅の時にこの分岐の中を読み込みます。min-widthで指定するときはその画面幅以上の時にこの分岐を読み込みます。メディアクエリは主に、デバイス間の画面幅の変更に対して閾値を引くことが多く、CSSのフレームワークであるBootstrapでは、以下の閾値を用いているので、実装する際には参考にしてみてください。576px768px992px1200pxこの閾値が引かれています。主にスマホとためのレスポンスが576px以下でタブレットのためのレスポンスが992pxになるかなと思います。閾値の引き方は人それぞれですが、目的がスマホ画面なのか、PC画面なのかの違いであれば、768px以上、以下で設定すればいいと思いますし、タブレットまで区別する場合は、上記の方法でいいかと思います。今回の内容はここまでです。`",
    "image": "/images/course_image/chapter_image/undraw_chapter4.png",
    "url": "/texts/css/chapter/4"
  },
  {
    "id": 100,
    "title": "DB(データベース)とは",
    "content": "`データベース(DB)とは？主にWebアプリなどのデータを管理するものです。Webアプリの開発体系は主にフロントエンド/バックエンドに分かれて作成されることが多く、バックエンドを担当する人はデータベースからデータを取得するための実装を行ったりします。SQLとは、データベースから特定のデータを取得するためのコードを書くのに必要不可欠です。テーブルの図データベースはテーブルというものを用いて管理します。テーブルの縦の列をカラム、横の列をレコードといいます。テーブルは必要なデータに応じで作成する必要があります。設計の際には使いやすさなども考えて作成しないといけないため、その際は別途学習が必要になります。本記事では、簡単なクエリ処理のために必要な知識を入れることを目的とした初歩的な内容となっています。テーブルからデータを取得するそれでは、テーブルからデータを取得する方法を学習していきたいと思います。基本的にデータを取得するための方法は、SELECT,FROMを用いて行います。pythonSELECTカラム名FROMテーブル名;イメージとしては、FROMで指定したテーブルの中の、SELECTで指定したカラム(列)のデータを取得する感じです。複数のカラムを取得するpythonSELECTカラム名1,カラム名2FROMテーブル名;すべてのカラムを選択する場合SELECTでカラム名を取得しますが、この場合、*で指定するとすべてのカラムを取得して表示することができます。pythonSELECT*FROMテーブル名;取得後のテーブルの表示名を変更するDB上のカラム名から取得して表示するときのカラム名を変更したいときはASを用います。pythonSELECTカラム名_oldASカラム名_newFROMテーブル名;今回の内容はここまでです。次回は取得するデータに条件を付けて取得する内容になります。`",
    "image": "/images/course_image/chapter_image/undraw_chapter1.png",
    "url": "/texts/sql/chapter/1"
  },
  {
    "id": 101,
    "title": "条件をつけて取得するデータを指定しよう！",
    "content": "`条件を付けて取得するデータを指定しよう！！特定の条件を持ったデータを取得する場合はWHEREを用います。WHEREは条件を付与することができ、特定のカラムを取得することができます。数値はそのままの記入でいいが、時刻(2024-04-22 00:00:00)は、シングルクォーテーションもしくはダブルクォーテーションで囲む必要があります。=を用いて特定のデータを取得しよう！！pythonSELECT*FROMテーブル名WHEREkaram=ka2coder;上記コードを用いることで、カラム名がkaramのka2coderというデータを取得することができます。不等号を用いて特定のデータを取得しよう！！例えば、作成日(created_at)が2022年7月1日以降の記事に関してのデータが複数あるとします。このデータを取得する場合、以下のようにコードを実装します。pythonSELECT*FROMテーブル名WHEREcteated_at>=2022-07-0100:00:00;ある文字を含むデータを取得する場合例えば、朝ごはん、昼ご飯、夜ご飯のような文字列にご飯を含むものを取得したいとします。LIKE演算子LIKE演算子を用いることで、特定の文字などを含むデータを取得することができます。例:nameカラムで、「いちご」を含む内容のデータを取得するには、以下のようにコードを組みます。pythonSELECT*FROMテーブル名WHEREnameLIKE'%いちご%';こうすることで、いちごみるくや冷凍いちごなどのいちごの前後に文字列が含まれるようなデータも取得することができます。%はワイルドカードとも言います。ここで、冷凍いちごやいちごなどのいちごの前に文字列が存在する場合は取得して、いちごみるくのようないちごの後方に文字列がある場合は除きたいとします。この場合は以下のようにコードを書くことで処理することができます。pythonSELECT*FROMテーブル名WHEREnameLIKE'%いちご';このように実装できます。逆の場合は、%の位置を逆にすることで実装することができます。否定をつけてデータを抽出しよう！NOTを利用することで条件を否定することができます。pythonSELECT*FROMテーブル名WHERENOT条件;今回の内容はここまでです。次回は、演算子に関しての内容を説明します！`",
    "image": "/images/course_image/chapter_image/undraw_chapter2.png",
    "url": "/texts/sql/chapter/2"
  },
  {
    "id": 102,
    "title": "演算子を用いて処理をしよう！",
    "content": "`演算子を用いて処理をしよう！！前章で条件に関しての内容を扱いましたが、条件を演算子を用いることでより詳細に取得するデータを指定することができます。AND演算子AND演算子は「かつ」の内容を表します。例えば、条件①と条件②がANDで結ばれている場合、条件①と条件②の両方を満たす場合、条件の処理が走るというものになります。pythonSELECT*FROMテーブル名WHERE条件1AND条件2;OR演算子OR演算子は「または」の意味を表します。例えば、条件①と条件②がORで結ばれている場合、条件①もしくは条件②の少なくともどちらかを満たしているときに処理が走るというものになります。pythonSELECT*FROMテーブル名WHERE条件1AND条件2;このように、演算子を利用することでより詳細なデータの取得をすることができます。今回の内容はここまでです。次回は並び替えとグルーピングに関しての内容を説明したいと思います。`",
    "image": "/images/course_image/chapter_image/undraw_chapter3.png",
    "url": "/texts/sql/chapter/3"
  },
  {
    "id": 103,
    "title": "並び替えとグルーピングを用いて取得するデータを制限しよう！！",
    "content": "`並び替えとグルーピングLIMITを用いて取得するデータを制限しよう！並び替え並び替えの時はODER BYを用います。pythonSELECT*FROMテーブル名ORDERBY処理;基本的に並び変えるときは、数値や時刻を昇順、降順で並び替えることが多いかと思います。昇順の場合は、ASC降順の場合はDESCを用いて並び替えをします。例えばデータが作成された時刻で並び替えをする場合、以下のように実装します。pythonSELECT*FROMテーブル名ORDERBYcreated_atASC;降順の場合は、ASCの部分をDESCに変えると実装することができます。LIMITを用いて取得するデータの件数を制限する取得する件数を制限する際は、LIMITを用いて件数を制限します。LIMITはクエリの最後に処理を記述します。pythonSELECT*FROMテーブル名WHERE条件処理LIMIT10;このように実装することで、最大10件のデータを取得することができます。なぜ最大なのかというと、そもそものテーブル内に条件に該当するデータが10件に満たない場合は10件未満の件数を取得するので最大という言い回しになります。重複したデータを削除しよう！アプリケーションを作成しているときに、テーブルの結合の関係で同じデータが複数作成されることがあります。その際に、重複したデータを一つにしたいとき、以下の方法を用います。DISTINCTを用いて特定のカラムを一意にすることが可能です。使い方としてはSELECTの後にカラム名を指定すると思いますが、そのカラム名の指定の際にDISTINCTを用います。pythonSELECTDISTINCT(カラム名)FROMテーブル名;これで指定したカラム名を一意に取得することができます。今回の講義はここまでです！次回はテーブルの結合に関しての内容になります。`",
    "image": "/images/course_image/chapter_image/undraw_chapter4.png",
    "url": "/texts/sql/chapter/4"
  },
  {
    "id": 104,
    "title": "四則演算と関数を用いた数値の取得に関して学習しよう！！",
    "content": "`四則演算と関数を用いた数値の取得に関して学習しよう！！今回の内容は簡単にデータを四則演算を用いて整理するための方法に関して説明します。足し算・引き算・掛け算・割り算これらは大前提として、数値が格納されているカラムに対してのみ実施することができます。数値が格納されているカラムに四則演算を適応して処理結果でクエリを取得することができます。pythonSELECTDATA1*1.10ASDATA1,DATA2/1.10ASDATA2,DATA3+DATA4ASDATAPLUS,DATA3-DATA4ASDATAMINUSFROMテーブル名;関数を用いた計算値の取得に関して関数を用いることで、簡単に計算処理を行いそのデータを取得することができます。SUM関数この関数は合計値を算出するための処理を行います。数値の格納されているカラムに対してSUMを用いることで、その指定したカラムの合計値を算出することができます。今までの内容と違うのは、合計値を算出するので、レコードは1行になります。pythonSELECTSUM(カラム名)FROMテーブル名AVG関数この関数は指定したカラムデータの平均値を算出することができます。pythonSELECTAVG(カラム名)FROMテーブル名;COUNT関数COUNT(カラム名)で指定すると、カラム名のデータがどれだけ存在するかを取得することができます。また、COUNT(*)を用いることで、レコードの個数を調べることができます。pythonSELECTCOUNT(カラム名)FROMテーブル名;MAX関数・MIN関数この関数では最大値、最小値を算出することができます。pythonSELECTMAX(カラム名)FROMテーブル名;pythonSELECTMIN(カラム名)FROMテーブル名;今回の内容は短くなってしまいましたが、ここまでです。次回はテーブルの結合に関して説明します。`",
    "image": "/images/course_image/chapter_image/undraw_chapter5.png",
    "url": "/texts/sql/chapter/5"
  },
  {
    "id": 105,
    "title": "複数のテーブルからデータを結合しよう！！",
    "content": "`複数のテーブルからデータを結合しよう！！今回は複数のテーブルを結合する操作に監視て説明します。例えば、userテーブルがあり、購入者一覧のテーブルにbought_usersテーブルがあるとします。この二つのテーブルは、usersテーブルのidと、bought_usersテーブルのusers_idで結びついているとします。その時、二つのテーブルを結合するには、以下のようなJoinを用いる必要があります。pythonSELECT*FROMusersuJOINbought_usersbuONu.id=bu.users_id;このコードを解説すると、usersテーブルからデータを取得します。一旦ここではusersテーブルの名前をuとしておきます。そのテーブルに、bought_usersテーブルをbuと名付け、u.idとbu.users_idが一致するレコードを紐づけます。この結合方法が最も一般的な結合の仕方になります。LeftJoin次にLeftJoinという結合方法に関して説明します。この結合方法は、左のテーブルをすべて表示し、左のテーブルに合わないデータはNULLとして表示します。この時のコードは以下のように記述することで結合することができます。pythonSELECT*FROMテーブル1LEFTJOINテーブル2ONテーブル1.id=テーブル2.user_id;例えば、とあるプログラミングサイトがあり、契約体系に無料契約、有料契約、プレミアム契約の状態があるとします。この時、登録しているユーザーのデータをまとめたテーブルがあるとします。サイト側の契約体系を表すテーブルをcontractsテーブル、契約ユーザーのテーブルをusersテーブルとします。contractsテーブル画像usersテーブル画像この二つのテーブルをLEFTJOINで結合する際のコードは以下のようになります。pythonSELECT*FROMcontractsLEFTJOINusersONcontracts.id=users.status_id;結合後のテーブル画像このSQLの処理では、テーブル1の内容はすべて表示し、テーブル2のデータで、テーブル1のidで存在しないものはNULLとして表示します。この結合方法がLEFTJOINになります。INNERJOIN(内部結合)次にINNERJOINの結合方法に関して説明します。INNERJOINは内部結合と言われ、右の結合するテーブルのデータに対応するように、左のテーブルのレコードを複製します。しかし、左のテーブルのレコードに対応するレコードが右のテーブルに存在しない場合、そのレコードは削除します。これが、INNERJOINの結合方法です。LEFTJOINと同じようなシチュエーションを考えます。この時、contractsテーブルは以下の通りです。画像usersテーブルはこのような状態である場合を考えます。画像この時、先ほどのLEFTJOINの時と同様にINNERJOINで実装します。pythonSELECT*FROMcontractsINNERJOINusersONcontracts.id=users.status_id;この処理の結果得られるてテーブルは以下の通りです。画像以上がINNERJOINの主な特徴です。ほかにもJOINの仕方はたくさんありますが、基本的なJOIN,LEFTJOIN,INNERJOINの基本知識があれば特に難しいということはありません。これでSQLのセクションは終了です。多少でも皆さんのお役に立てていたら大変うれしい限りでです。`",
    "image": "/images/course_image/chapter_image/undraw_chapter6.png",
    "url": "/texts/sql/chapter/6"
  },
  {
    "id": 1000,
    "title": "Bootstrapを利用しよう!!",
    "content": "Bootstrapは、Twitter社(現X社)が作ったレスポンシブ対応に適したCSSを取りまとめたフレームワークです。特に、レスポンシブ対応や簡単に様々な機能(ボタン・フォーム・アラート)をクラスを割り当てるだけでデザインを豊かにしてくれます。このBootstrapには独特のクラスの仕組みを持っていますが、このクラスを理解することでそれぞれの機能を一から実装する必要がなく、かなり使いやすくなります。ここの内容に関しては別途の記事で説明したいと思います。Bootstrapはv4.5以降のバージョンからjQueryが非対応になりました。Web制作の領域では非常に人気の高いフレームワークであるjQueryですが、セキュリティ面の脆弱性の危惧から廃止になったようです。そのため、jQueryを用いてBootstrapを使用したい場合は、v4.5以前のBootstrapを使用するようにしましょう。基本的にBootstrapはドキュメントが充実しているため、わからないことがあれば適宜そちらを参考にするのもいいかなと思います。主に、Bootstrapを適用する方法は3通り存在します。ここでは一つずつ説明していきたいと思います。リモート上のCSSを利用する方法: サイト制作用のフォルダを作成して、VScodeなどのコードエディタで開きます。その後、HTMLファイルを作成して開きます。そのファイルの中に以下のコードを書きこんでください。... コマンドを利用してBootstrapを適用する方法についても記載しています。",
    "image": "/images/blog_image/introduce_bootstrap.png",
    "url": "/blogs/article/1"
  },
  {
    "id": 1001,
    "title": "Bootstrapのcolって何？",
    "content": "Bootstrapのクラスには、とても使いやすいクラスがいくつか存在します。今回は、その中のcolに関して説明します。colとは、画面を12分割したものを1として、最大12が画面全体幅として、1~12まで選択することができます。例えば以下のように、色を付けて表示してみます。rowとcolを組み合わせることで、横並びのデザインを可能にすることができます。colは12で最大幅なので、col-7とcol-5で組み合わせることで画面幅7:5のスペースを並べることができます。bootstrapにはこのcolのクラスに対して、レスポンシブ対応を含めたクラスが存在します。これはどういうものかというと、画面幅がこのブレークポイントよりも小さい場合、横並びではなく、縦並びになります。このクラスの特性を用いることで、レスポンシブなサイトを作成することができます。本来であれば、レスポンシブ対応を含めたWebサイトを作成する際にはメディアクエリというCSSに備わる機能を利用するのですが、簡易的なものでなおかつ、Bootstrapのクラスを意識してデザインを作成した場合、メディアクエリを用いずにレスポンシブ対応のWebサイトを作成することができます。今回はBootstrapのcolという使い勝手のいいクラスの紹介をさせていただきました。何かお役に立てましたでしょうか？有益な情報になっていれば非常にうれしいです。本日はここまでです。また別の記事で会いましょう！！",
    "image": "/images/blog_image/undraw_Designer_girl.png",
    "url": "/blogs/article/2"
  },
  {
    "id": 1002,
    "title": "開発でよく使うGitコマンド",
    "content": "開発でよく使うGitコマンド\n\n開発(チーム開発など全般)で主に使用するコマンドをまとめたいと思います。前提として、Githubとの各種連携は済んでいることを前提にお話しさせていただきます。\n\nリポジトリを作成した初回に連携させるためのコマンド\n例えば、sampleという名前のリポジトリを作成した場合、以下のようなコマンドを打ち込むことで、初期のリポジトリを紐づけることができます。\n\n```\necho \"# sample\" >> README.md\ngit init\n```\n\n1行目のコマンドは、README.mdファイル内に、# sampleという文字列を記載して追加するというものです。2行目のコマンドは、新しいGitリポジトリを初期化します。実行すると、現在のディレクトリに .git フォルダが作成され、Gitがこのディレクトリをリポジトリとして管理できるようになります。\n\n```\ngit add README.md\ngit commit -m \"first commit\"\ngit branch -M main\n```\n\ngit addコマンドは、指定したファイルをステージングエリア（インデックス）に追加するために使用します。ステージングエリアは、次のコミットに含めたいファイルのリストを保持する場所です。git commit コマンドは、ステージングエリアにあるファイルのスナップショットを取得し、それをリポジトリにコミットとして保存します。コミットはGitにおける変更の一つの記録です。m オプションはコミットメッセージを指定するためのもので、first commit がそのメッセージです。コミットメッセージは、そのコミットで行った変更の説明として使われます。この場合、最初のコミットであることを示す「first commit」というメッセージを付けています。git branchコマンドは、Gitリポジトリ内のブランチ（分岐）を操作するためのコマンドです。Mオプションは、既存のブランチの名前を強制的に変更するために使われます。通常、新しいリポジトリを初期化すると、Gitはデフォルトで「master」というブランチを作成しますが、Mオプションを使って「main」という名前に変更します。これにより、「main」という名前のブランチがデフォルトブランチとして設定されます。\n\n```\ngit remote add origin https://github.com/[username]/sample.git\ngit push -u origin main\n```\n\ngit remote add origin https://github.com/[username]/sample.git コマンド\nこのコマンドは、現在のディレクトリを指定したgithub上のリポジトリと紐づける役割をします。このコマンドを実行することで、今後のファイル追加などを管理することができるようになります。\n\ngit push -u origin main コマンド\nこのコマンドは先ほど、追加したREADME.mdファイルを追加することに加え、-uオプションでこのプッシュの際に次回以降のpushコマンドのデフォルトを指定することができます。origin main は、リモートリポジトリのmainブランチを指定するというものです。\n\n以上が、リポジトリを初回作成した際の基本的なコマンドになります。\n\nファイル変更をプッシュするためのコマンド\nここでは、変更したファイルをgithubのリポジトリ内にプッシュするための手順を説明します。\n\n```\ngit add .\n\ngit commit -m \"commit message\"\n\ngit push origin main\n```\n\ngit add .コマンドは、編集したファイルすべてをadd します。git commit -m \"commit message\" コマンドで、コミットメッセージを反映させます。git push origin main コマンドで変更をリポジトリに反映させます。\n\nここでですね、チーム開発など、git add .で変更ファイルをすべて反映してしまうとまずい場面とかが存在するので、別のaddの方法を説明します。\n\n```\ngit status\n\ngit add [ファイル名]\n```\n\ngit status コマンドで、変更したファイル一覧が赤文字で表記されます。その中で対応するタスクに即したファイル名がある場合、その赤字で表示されたファイル名をgit add [ファイル名]で指定して指定したファイルのみをadd していくこともできます。これはチーム開発など、個の開発環境に即したファイルなども存在するので(yarn-lockファイルなど)チーム開発の際はこのあたりを注意するといいかもしてないですね。\n\nブランチを切るためのコマンド\n\n```\ngit branch\n\ngit checkout -b branch-name\n\ngit checkout branch-name\n```\n\ngit branchコマンドで、現在のリモートブランチとほかになんのブランチが切ってあるかを確認することができます。git checkout -b branch-name コマンドでは、branch-name という名前のブランチを新しく切り、そのブランチ先に移動するということができます。git checkout branch-name コマンドでは、すでに存在するブランチ名のブランチに移動することができます。\n\nこれらのコマンドは開発の際に頻繁に使用するので、しっかり理解して使えるようになりましょう！！\n\n今回の内容はここまでです。少しはお役に立てる内容がありましたでしょうか？次回以降もまた有益な内容をどんどん配信していきたいと思いますので、楽しみにしていてくださいね！",
    "image": "/images/blog_image/undraw_Programming.png",
    "url": "/blogs/article/3"
  },
  {
    "id": 1003,
    "title": "Vue.jsで作成したWebページをGithubPagesで公開する方法",
    "content": "Vue.jsで作成したWebページをGithubPagesで公開する方法\n\n今回はVue.jsで作成したWebページを無料のサービスであるGitHubPagesで公開するための方法を記載していきたいと思います。前提として、Vue.jsでWebサービスが作成されていることが前提です。\n\n初回デプロイの手順\n\nプロジェクトの準備\nまず、Vue.jsプロジェクトが正しく動作していることを確認します。\n\n    npm run serve\n\nこれでローカルでアプリケーションが正しく動作していることを確認します。\n\nvue.config.js ファイルの作成\nプロジェクトのルートディレクトリに `vue.config.js` ファイルを作成し、以下の内容を追加します。\n\n    module.exports = {\n\n        publicPath: process.env.NODE_ENV === 'production' ? '/リポジトリ名/' : '/'\n\n    }\n\nリポジトリ名には、GitHubリポジトリの名前を入力してください。\n\nリポジトリの初期化\nプロジェクトがGitリポジトリとして初期化されていない場合、以下のコマンドを実行して初期化します。\n\n    git init\n\n    git add -A\n\n    git commit -m \"Initial commit\"\n\ngh-pages パッケージのインストール\nGitHub Pagesにデプロイするための `gh-pages` パッケージをインストールします。\n\n    npm install gh-pages --save-dev\n\npackage.json の修正\npackage.json にデプロイスクリプトを追加します。\n\n    {\n        \"scripts\": {\n        \"deploy\": \"npm run build && gh-pages -d dist\"\n        }\n    }\n\nGitHub リポジトリの作成\nGitHubに新しいリポジトリを作成します。リポジトリの名前は先ほどの `vue.config.js` で設定したものと一致させてください。\n\n初回デプロイ\n以下のコマンドを実行して、プロジェクトをGitHub Pagesにデプロイします。\n\n    npm run deploy\n\nこれにより、dist フォルダがビルドされ、GitHub Pages用のブランチ（通常は gh-pages）にプッシュされます。\n\nソースコード修正後のデプロイ\nソースコードに修正を加えた後、再度GitHub Pagesにデプロイするには、以下の手順を実行します。\n\n変更をコミット\nまず、ローカルでの変更をGitにコミットします。\n\n    git add -A\n\n    git commit -m \"Update message\"\n\n再デプロイ\n次に、以下のコマンドを実行して再デプロイします。\n\n    npm run deploy\n\nこのコマンドにより、新しいビルドが行われ、GitHub Pagesにプッシュされます。\n\n補足情報\n\n- GitHub Pagesのデフォルトのブランチは `gh-pages` です。このブランチを使用してサイトが公開されます。\n- 公開されたサイトは通常 `https://ユーザー名.github.io/リポジトリ名/` のURLでアクセス可能です。\n\nこれで、Vue.jsプロジェクトのGitHub Pagesへの公開と、ソースコード修正後の再デプロイが完了します。",
    "image": "/images/blog_image/undraw_Work_time.png",
    "url": "/blogs/article/4"
  },
  {
    "id": "",
    "title": "",
    "content": "",
    "image": "",
    "url": ""
  }
]